name: CI

on:
  push:
    branches-ignore:
      - 'main'
      - 'docs'

env:
  BUILDER_VERSION: v0.9.84
  BUILDER_SOURCE: releases
  BUILDER_HOST: https://d19elf31gohf1l.cloudfront.net
  PACKAGE_NAME: aws-iot-device-sdk-java-v2
  RUN: ${{ github.run_id }}-${{ github.run_number }}
  AWS_DEFAULT_REGION: us-east-1
  AWS_DEVICE_FARM_REGION: us-west-2 # Device Farm only available in us-west-2 region
  DA_TOPIC: test/da
  DA_SHADOW_NAME: DATestShadow
  DA_SHADOW_PROPERTY: datest
  DA_SHADOW_VALUE_SET: ON
  DA_SHADOW_VALUE_DEFAULT: OFF
  CI_FLEET_PROVISIONING_ROLE: arn:aws:iam::180635532705:role/service-role/CI_FleetProvisioning_Role
  CI_MQTT5_ROLE: arn:aws:iam::180635532705:role/CI_MQTT5_Role
  CI_ANDROID_DEVICE_TESTING_ROLE: arn:aws:iam::180635532705:role/CI_Android_Device_Testing_Role
  CI_SHADOW_SERVICE_CLIENT_ROLE: arn:aws:iam::180635532705:role/CI_ShadowServiceClient_Role
  CI_JOBS_SERVICE_CLIENT_ROLE: arn:aws:iam::180635532705:role/CI_JobsServiceClient_Role

jobs:
  windows-java-compat:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        version:
          - 8
          - 11
          - 17
    permissions:
      id-token: write # This is required for requesting the JWT
    steps:
    - name: Checkout Sources
      uses: actions/checkout@v2
    - name: Setup Java
      uses: actions/setup-java@v3.14.1
      with:
        distribution: temurin
        java-version: ${{ matrix.version }}
        cache: maven
    - name: Build ${{ env.PACKAGE_NAME }} + consumers
      run: |
        python -c "from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')"
        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --spec=downstream
    - name: configure AWS credentials (MQTT5)
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ env.CI_MQTT5_ROLE }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
    - name: Service tests
      shell: bash
      run: |
        source utils/test_setup.sh s3://iot-sdk-ci-bucket-us-east1/IotUsProdMqtt5EnvironmentVariables.txt us-east-1
        mvn test -Dtest=ShadowTests -Dsurefire.failIfNoSpecifiedTests=false
        mvn test -Dtest=JobsTests -Dsurefire.failIfNoSpecifiedTests=false
        mvn test -Dtest=IdentityTests -Dsurefire.failIfNoSpecifiedTests=false
        source utils/test_cleanup.sh
    - name: MQTT311 tests
      shell: bash
      run: |
        source utils/test_setup.sh s3://iot-sdk-ci-bucket-us-east1/IotUsProdMqtt5EnvironmentVariables.txt us-east-1
        mvn test -Dtest=MqttBuilderTest -Dsurefire.failIfNoSpecifiedTests=false
        source utils/test_cleanup.sh
    - name: MQTT5 tests
      shell: bash
      run: |
        source utils/test_setup.sh s3://iot-sdk-ci-bucket-us-east1/IotUsProdMqtt5EnvironmentVariables.txt us-east-1
        mvn test -Dtest=Mqtt5BuilderTest -Dsurefire.failIfNoSpecifiedTests=false
        source utils/test_cleanup.sh

  osx-java-compat:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        version:
          - 8
          - 11
          - 17
    permissions:
      id-token: write # This is required for requesting the JWT
    steps:
    - name: Checkout Sources
      uses: actions/checkout@v2
    - name: Setup Java
      uses: actions/setup-java@v3.14.1
      with:
        distribution: ${{ matrix.version == 8 && 'corretto' || 'temurin' }}
        java-version: ${{ matrix.version }}
        cache: maven
    - name: Build ${{ env.PACKAGE_NAME }} + consumers
      run: |
        python3 -c "from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')"
        chmod a+x builder
        ./builder build -p ${{ env.PACKAGE_NAME }} --spec=downstream
    - name: configure AWS credentials (MQTT5)
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: ${{ env.CI_MQTT5_ROLE }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
    - name: Service tests
      run: |
        source utils/test_setup.sh s3://iot-sdk-ci-bucket-us-east1/IotUsProdMqtt5EnvironmentVariables.txt us-east-1
        mvn test -Dtest=ShadowTests -Dsurefire.failIfNoSpecifiedTests=false
        mvn test -Dtest=JobsTests -Dsurefire.failIfNoSpecifiedTests=false
        mvn test -Dtest=IdentityTests -Dsurefire.failIfNoSpecifiedTests=false
        source utils/test_cleanup.sh
    - name: MQTT311 tests
      run: |
        source utils/test_setup.sh s3://iot-sdk-ci-bucket-us-east1/IotUsProdMqtt5EnvironmentVariables.txt us-east-1
        mvn test -Dtest=MqttBuilderTest -DfailIfNoTests=false -Dsurefire.failIfNoSpecifiedTests=false
        source utils/test_cleanup.sh
    - name: MQTT5 tests
      run: |
        source utils/test_setup.sh s3://iot-sdk-ci-bucket-us-east1/IotUsProdMqtt5EnvironmentVariables.txt us-east-1
        mvn test -Dtest=Mqtt5BuilderTest -DfailIfNoTests=false -Dsurefire.failIfNoSpecifiedTests=false
        source utils/test_cleanup.sh

  linux-java-compat:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        version:
          - 8
          - 11
          - 17
    permissions:
      id-token: write # This is required for requesting the JWT
    steps:
      - name: Checkout Sources
        uses: actions/checkout@v2
      - name: Setup Java
        uses: actions/setup-java@v3.14.1
        with:
          distribution: temurin
          java-version: ${{ matrix.version }}
          cache: maven
      - name: Build ${{ env.PACKAGE_NAME }} + consumers
        run: |
          java -version
          mvn compile
          mvn install -Dmaven.test.skip
      - name: configure AWS credentials (MQTT5)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.CI_MQTT5_ROLE }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - name: Service tests
        run: |
          source utils/test_setup.sh s3://iot-sdk-ci-bucket-us-east1/IotUsProdMqtt5EnvironmentVariables.txt us-east-1
          mvn test -Dtest=ShadowTests -Dsurefire.failIfNoSpecifiedTests=false
          mvn test -Dtest=JobsTests -Dsurefire.failIfNoSpecifiedTests=false
          mvn test -Dtest=IdentityTests -Dsurefire.failIfNoSpecifiedTests=false
          source utils/test_cleanup.sh
      - name: MQTT311 tests
        run: |
          source utils/test_setup.sh s3://iot-sdk-ci-bucket-us-east1/IotUsProdMqtt5EnvironmentVariables.txt us-east-1
          mvn test -Dtest=MqttBuilderTest -Dsurefire.failIfNoSpecifiedTests=false
          source utils/test_cleanup.sh
      - name: MQTT5 tests
        run: |
          source utils/test_setup.sh s3://iot-sdk-ci-bucket-us-east1/IotUsProdMqtt5EnvironmentVariables.txt us-east-1
          mvn test -Dtest=Mqtt5BuilderTest -Dsurefire.failIfNoSpecifiedTests=false
          source utils/test_cleanup.sh

  android-device-farm:
    name: Android Device Farm
    runs-on: ubuntu-22.04 # latest
    permissions:
      # These permissions needed to interact with GitHub's OIDC Token endpoint
      id-token: write # This is required for requesting the JWT
    steps:
      - name: Checkout Sources
        uses: actions/checkout@v2
        with:
            submodules: true
      # Setup JDK 17
      - name: set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'
      # Ensure Gradle uses this JDK (important when toolchains are present)
      - name: Point Gradle at JDK 17
        run: echo "ORG_GRADLE_JAVA_HOME=$JAVA_HOME" >> $GITHUB_ENV
      - name: Mirror ANDROID_HOME â†’ ANDROID_SDK_ROOT
        run: echo "ANDROID_SDK_ROOT=$ANDROID_HOME" >> "$GITHUB_ENV"
      - name: Configure AWS credentials for Device Farm
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.CI_ANDROID_DEVICE_TESTING_ROLE }}
          aws-region: ${{ env.AWS_DEVICE_FARM_REGION }}

      - name: Build ${{ env.PACKAGE_NAME }}
        run: |
          cd android
          ./gradlew assembledebug
          ./gradlew publishToMavenLocal -PnewVersion="1.0.0-SNAPSHOT"
          echo "Build status report=${{ job.status }}."
      - name: Setup Android Test Files New
        run: |
          cd sdk/tests/android/testapp/src/main/assets
          python3 -m pip install boto3
          python3 ./android_file_creation.py
      
      - name: Set Android keystore home
        run: |
          echo "ANDROID_SDK_HOME=$GITHUB_WORKSPACE/.android-home" >> "$GITHUB_ENV"
          echo "ANDROID_PREFS_ROOT=$GITHUB_WORKSPACE/.android-home" >> "$GITHUB_ENV"
          mkdir -p "$GITHUB_WORKSPACE/.android-home/.android"
      - name: Create debug keystore
        run: |
          keytool -genkeypair \
            -keystore "$ANDROID_SDK_HOME/.android/debug.keystore" \
            -storepass android -keypass android \
            -alias androiddebugkey \
            -dname "CN=Android Debug,O=Android,C=US" \
            -keyalg RSA -keysize 2048 -validity 14000

      - name: Build Test App
        run: |
          cd sdk/tests/android/testapp
          ../../../../android/gradlew assembledebug
          ../../../../android/gradlew assembleAndroidTest
          cd ~
      - name: Device Farm Tests Highly Available
        run: |
          echo "Attempting to run python script"
          python3 -m pip install requests
          python3 ./utils/run_android_ci.py \
          --region ${{ env.AWS_DEVICE_FARM_REGION }} \
          --run_id ${{ github.run_id }} \
          --run_attempt ${{ github.run_attempt }} \
          --project_arn $(aws secretsmanager get-secret-value --region us-east-1 --secret-id "ci/DeviceFarm/ProjectArn" --query "SecretString" | cut -f5 -d\" | cut -f1 -d'\') \
          --device_pool_arn $(aws secretsmanager get-secret-value --region us-east-1 --secret-id "ci/DeviceFarm/DevicePoolArn" --query "SecretString" | cut -f5 -d\" | cut -f1 -d'\') \
          --device_pool highly_available
      - name: Device Farm Tests Android 8
        run: |
          echo "Attempting to run python script"
          python3 -m pip install requests
          python3 ./utils/run_android_ci.py \
          --region ${{ env.AWS_DEVICE_FARM_REGION }} \
          --run_id ${{ github.run_id }} \
          --run_attempt ${{ github.run_attempt }} \
          --project_arn $(aws secretsmanager get-secret-value --region us-east-1 --secret-id "ci/DeviceFarm/ProjectArn" --query "SecretString" | cut -f5 -d\" | cut -f1 -d'\') \
          --device_pool_arn $(aws secretsmanager get-secret-value --region us-east-1 --secret-id "ci/DeviceFarm/DevicePoolArn/Android8" --query "SecretString" | cut -f5 -d\" | cut -f1 -d'\') \
          --device_pool android_8

  # check that docs can still build
  check-docs:
    runs-on: ubuntu-22.04 # latest
    steps:
      - uses: actions/checkout@v2
      - name: Check docs
        run: |
          mvn install -Dmaven.test.skip
          ./make-docs.py

  # ensure that aws-crt version is consistent among different files
  consistent-crt-version:
    runs-on: ubuntu-22.04 # latest
    steps:
      - uses: actions/checkout@v2
      - name: Consistent aws-crt version
        run: |
          ./update-crt.py --check_consistency

  check-codegen-edits:
    runs-on: ubuntu-22.04 # latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Check for edits to code-generated files
        run: |
          ./utils/check_codegen_edits.py

  # Runs the service client tests
  linux-service-client-tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        version:
          - 17
    permissions:
      id-token: write # This is required for requesting the JWT
    steps:
      - name: Checkout Sources
        uses: actions/checkout@v2
      - name: Setup Java
        uses: actions/setup-java@v3.14.1
        with:
          distribution: temurin
          java-version: ${{ matrix.version }}
          cache: maven
      - name: Build ${{ env.PACKAGE_NAME }} + consumers
        run: |
          java -version
          mvn install -Dmaven.test.skip
      - name: Running samples and service client tests in CI setup
        run: |
          python3 -m pip install boto3
          sudo apt-get update -y
          sudo apt-get install softhsm2 -y
          softhsm2-util --version
      - name: configure AWS credentials (Fleet provisioning)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.CI_FLEET_PROVISIONING_ROLE }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - name: run Fleet Provisioning service client test for MQTT311
        working-directory: ./servicetests
        run: |
          export PYTHONPATH=${{ github.workspace }}/utils
          python3 ./test_cases/test_fleet_provisioning.py --thing-name-prefix Fleet_Thing_ --mqtt-version 3
      - name: run Fleet Provisioning service client test for MQTT5
        working-directory: ./servicetests
        run: |
          export PYTHONPATH=${{ github.workspace }}/utils
          python3 ./test_cases/test_fleet_provisioning.py --thing-name-prefix Fleet_Thing_ --mqtt-version 5
      - name: run Fleet Provisioning with CSR service client test for MQTT311
        working-directory: ./servicetests
        run: |
          export PYTHONPATH=${{ github.workspace }}/utils
          python3 ./test_cases/test_fleet_provisioning.py --thing-name-prefix Fleet_Thing_ --mqtt-version 3 --use-csr
      - name: run Fleet Provisioning with CSR service client test for MQTT5
        working-directory: ./servicetests
        run: |
          export PYTHONPATH=${{ github.workspace }}/utils
          python3 ./test_cases/test_fleet_provisioning.py --thing-name-prefix Fleet_Thing_ --mqtt-version 5 --use-csr
      - name: configure AWS credentials (Shadow)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.CI_SHADOW_SERVICE_CLIENT_ROLE }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - name: run Shadow service client test for MQTT311
        working-directory: ./servicetests
        run: |
          export PYTHONPATH=${{ github.workspace }}/utils
          python3 ./test_cases/test_shadow_update.py --mqtt-version 3
      - name: run Shadow service client test for MQTT5
        working-directory: ./servicetests
        run: |
          export PYTHONPATH=${{ github.workspace }}/utils
          python3 ./test_cases/test_shadow_update.py --mqtt-version 5
      - name: run Named Shadow service client test for MQTT311
        working-directory: ./servicetests
        run: |
          export PYTHONPATH=${{ github.workspace }}/utils
          python3 ./test_cases/test_shadow_update.py --mqtt-version 3 --use-named-shadow
      - name: run Named Shadow service client test for MQTT5
        working-directory: ./servicetests
        run: |
          export PYTHONPATH=${{ github.workspace }}/utils
          python3 ./test_cases/test_shadow_update.py --mqtt-version 5 --use-named-shadow
      - name: configure AWS credentials (Jobs)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.CI_JOBS_SERVICE_CLIENT_ROLE }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - name: run Jobs service client test for MQTT311
        working-directory: ./servicetests
        run: |
          export PYTHONPATH=${{ github.workspace }}/utils
          python3 ./test_cases/test_jobs_execution.py --mqtt-version 3
      - name: run Jobs service client test for MQTT5
        working-directory: ./servicetests
        run: |
          export PYTHONPATH=${{ github.workspace }}/utils
          python3 ./test_cases/test_jobs_execution.py --mqtt-version 5
