name: CI

on:
  push:
    branches-ignore:
      - 'main'
      - 'docs'

env:
  BUILDER_VERSION: v0.9.14
  BUILDER_SOURCE: releases
  BUILDER_HOST: https://d19elf31gohf1l.cloudfront.net
  PACKAGE_NAME: aws-iot-device-sdk-java-v2
  RUN: ${{ github.run_id }}-${{ github.run_number }}
  AWS_DEFAULT_REGION: us-east-1
  DA_TOPIC: test/da
  DA_SHADOW_PROPERTY: datest
  DA_SHADOW_VALUE_SET: ON
  DA_SHADOW_VALUE_DEFAULT: OFF
  CI_IOT_CONTAINERS: ${{ secrets.AWS_CI_IOT_CONTAINERS }}
  CI_PUBSUB_ROLE: ${{ secrets.AWS_CI_PUBSUB_ROLE }}
  CI_CUSTOM_AUTHORIZER_ROLE: ${{ secrets.AWS_CI_CUSTOM_AUTHORIZER_ROLE }}
  CI_SHADOW_ROLE: ${{ secrets.AWS_CI_SHADOW_ROLE }}
  CI_JOBS_ROLE: ${{ secrets.AWS_CI_JOBS_ROLE }}
  CI_FLEET_PROVISIONING_ROLE: ${{ secrets.AWS_CI_FLEET_PROVISIONING_ROLE }}
  CI_DEVICE_ADVISOR: ${{ secrets.AWS_CI_DEVICE_ADVISOR_ROLE }}

jobs:
  linux-compat:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image:
          - manylinux2014-x64
          - al2-x64
          - fedora-34-x64
          - rhel8-x64
          #- manylinux2014-x86 until we find 32-bit linux binaries we can use
    permissions:
      id-token: write # This is required for requesting the JWT
    steps:
    - name: configure AWS credentials (containers)
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ env.CI_IOT_CONTAINERS }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
    - name: Build ${{ env.PACKAGE_NAME }}
      run: |
        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh
        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}
    # NOTE: we cannot run samples or DeviceAdvisor here due to container restrictions

  windows:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        version:
          - 8
          - 11
          - 17
    permissions:
      id-token: write # This is required for requesting the JWT
    steps:
    - name: Checkout Sources
      uses: actions/checkout@v2
    - name: Setup Java
      uses: actions/setup-java@v2
      with:
        distribution: temurin
        java-version: ${{ matrix.version }}
        cache: maven
    - name: Build ${{ env.PACKAGE_NAME }} + consumers
      run: |
        python -c "from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')"
        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --spec=downstream
    - name: Running samples in CI setup
      run: |
        python -m pip install boto3
    - name: configure AWS credentials (PubSub)
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ env.CI_PUBSUB_ROLE }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
    - name: run PubSub sample
      run: |
        python ./utils/run_sample_ci.py --language Java --sample_file 'samples/BasicPubSub' --sample_region ${{ env.AWS_DEFAULT_REGION }} --sample_secret_endpoint 'ci/endpoint' --sample_secret_certificate 'ci/PubSub/cert' --sample_secret_private_key 'ci/PubSub/key' --sample_main_class 'pubsub.PubSub'
    - name: run Windows Certificate Connect sample
      run: |
        python ./utils/run_sample_ci.py --language Java --sample_file 'samples/WindowsCertConnect' --sample_region ${{ env.AWS_DEFAULT_REGION }} --sample_secret_endpoint 'ci/endpoint' --sample_secret_certificate 'ci/PubSub/cert' --sample_secret_private_key 'ci/PubSub/key' --sample_run_certutil true --sample_main_class 'windowscertconnect.WindowsCertConnect'
    - name: configure AWS credentials (Device Advisor)
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ env.CI_DEVICE_ADVISOR }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
    - name: run DeviceAdvisor
      run: |
        python ./deviceadvisor/script/DATestRun.py

  osx:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        version:
          - 8
          - 11
          - 17
    permissions:
      id-token: write # This is required for requesting the JWT
    steps:
    - name: Checkout Sources
      uses: actions/checkout@v2
    - name: Setup Java
      uses: actions/setup-java@v2
      with:
        distribution: temurin
        java-version: ${{ matrix.version }}
        cache: maven
    - name: Build ${{ env.PACKAGE_NAME }} + consumers
      run: |
        python3 -c "from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')"
        chmod a+x builder
        ./builder build -p ${{ env.PACKAGE_NAME }} --spec=downstream
    - name: Running samples in CI setup
      run: |
        python3 -m pip install boto3
    - name: configure AWS credentials (PubSub)
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ env.CI_PUBSUB_ROLE }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
    - name: run PubSub sample
      run: |
        python3 ./utils/run_sample_ci.py --language Java --sample_file 'samples/BasicPubSub' --sample_region ${{ env.AWS_DEFAULT_REGION }} --sample_secret_endpoint 'ci/endpoint' --sample_secret_certificate 'ci/PubSub/cert' --sample_secret_private_key 'ci/PubSub/key' --sample_main_class 'pubsub.PubSub'
    - name: configure AWS credentials (Device Advisor)
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ env.CI_DEVICE_ADVISOR }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
    - name: run DeviceAdvisor
      run: |
        python3 ./deviceadvisor/script/DATestRun.py

  java-compat:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        version:
          - 8
          - 11
          - 17
    permissions:
      id-token: write # This is required for requesting the JWT
    steps:
      - name: Checkout Sources
        uses: actions/checkout@v2
      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: temurin
          java-version: ${{ matrix.version }}
          cache: maven
      - name: Build ${{ env.PACKAGE_NAME }} + consumers
        run: |
          java -version
          mvn -B test -Daws.crt.debugnative=true
          mvn install -Dmaven.test.skip
      - name: Running samples in CI setup
        run: |
          python3 -m pip install boto3
      - name: configure AWS credentials (PubSub)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.CI_PUBSUB_ROLE }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - name: run PubSub sample
        run: |
          python3 ./utils/run_sample_ci.py --language Java --sample_file 'samples/BasicPubSub' --sample_region ${{ env.AWS_DEFAULT_REGION }} --sample_secret_endpoint 'ci/endpoint' --sample_secret_certificate 'ci/PubSub/cert' --sample_secret_private_key 'ci/PubSub/key' --sample_main_class 'pubsub.PubSub'
      - name: configure AWS credentials (Device Advisor)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.CI_DEVICE_ADVISOR }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - name: run DeviceAdvisor
        run: |
          python3 ./deviceadvisor/script/DATestRun.py

  # check that docs can still build
  check-docs:
    runs-on: ubuntu-20.04 # latest
    steps:
      - uses: actions/checkout@v2
      - name: Check docs
        run: |
          mvn install -Dmaven.test.skip
          ./make-docs.py

  # ensure that aws-crt version is consistent among different files
  consistent-crt-version:
    runs-on: ubuntu-20.04 # latest
    steps:
      - uses: actions/checkout@v2
      - name: Consistent aws-crt version
        run: |
          ./update-crt.py --check-consistency

  check-codegen-edits:
    runs-on: ubuntu-20.04 # latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Check for edits to code-generated files
        run: |
          ./utils/check_codegen_edits.py

  # Runs the samples and ensures that everything is working
  linux-smoke-tests:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        version:
          - 17
    permissions:
      id-token: write # This is required for requesting the JWT
    steps:
      - name: Checkout Sources
        uses: actions/checkout@v2
      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: temurin
          java-version: ${{ matrix.version }}
          cache: maven
      - name: Build ${{ env.PACKAGE_NAME }} + consumers
        run: |
          java -version
          mvn install -Dmaven.test.skip
      - name: Running samples in CI setup
        run: |
          python3 -m pip install boto3
          sudo apt-get update -y
          sudo apt-get install softhsm -y
          softhsm2-util --version
      - name: configure AWS credentials (Connect and PubSub)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.CI_PUBSUB_ROLE }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - name: run Basic Connect sample
        run: |
          python3 ./utils/run_sample_ci.py --language Java --sample_file 'samples/BasicConnect' --sample_region ${{ env.AWS_DEFAULT_REGION }} --sample_secret_endpoint 'ci/endpoint' --sample_secret_certificate 'ci/PubSub/cert' --sample_secret_private_key 'ci/PubSub/key' --sample_main_class 'basicconnect.BasicConnect'
      - name: run Websocket Connect sample
        run: |
          python3 ./utils/run_sample_ci.py --language Java --sample_file 'samples/WebsocketConnect' --sample_region ${{ env.AWS_DEFAULT_REGION }} --sample_secret_endpoint 'ci/endpoint' --sample_arguments '--signing_region us-east-1' --sample_main_class 'websocketconnect.WebsocketConnect'
      - name: run PubSub sample
        run: |
          python3 ./utils/run_sample_ci.py --language Java --sample_file 'samples/BasicPubSub' --sample_region ${{ env.AWS_DEFAULT_REGION }} --sample_secret_endpoint 'ci/endpoint' --sample_secret_certificate 'ci/PubSub/cert' --sample_secret_private_key 'ci/PubSub/key' --sample_main_class 'pubsub.PubSub'
      - name: run CustomKeyOperations sample
        run: |
          python3 ./utils/run_sample_ci.py --language Java --sample_file 'samples/CustomKeyOpsPubSub' --sample_region ${{ env.AWS_DEFAULT_REGION }} --sample_secret_endpoint 'ci/endpoint' --sample_secret_certificate 'ci/PubSub/cert' --sample_secret_private_key 'ci/PubSub/keyp8' --sample_main_class 'customkeyopspubsub.CustomKeyOpsPubSub'
      - name: run PKCS11 Connect sample
        run: |
          mkdir -p /tmp/tokens
          export SOFTHSM2_CONF=/tmp/softhsm2.conf
          echo "directories.tokendir = /tmp/tokens" > /tmp/softhsm2.conf
          python3 ./utils/run_sample_ci.py --language Java --sample_file 'samples/Pkcs11Connect' --sample_region ${{ env.AWS_DEFAULT_REGION }} --sample_secret_endpoint 'ci/endpoint' --sample_secret_certificate 'ci/PubSub/cert' --sample_secret_private_key 'ci/PubSub/keyp8' --sample_run_softhsm 'true' --sample_arguments '--pkcs11_lib "/usr/lib/softhsm/libsofthsm2.so" --pin 0000 --token_label "my-token" --key_label "my-key"' --sample_main_class 'pkcs11connect.Pkcs11Connect'
      - name: configure AWS credentials (Custom Authorizer)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.CI_CUSTOM_AUTHORIZER_ROLE }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - name: run CustomAuthorizerConnect sample
        run: |
          python3 ./utils/run_sample_ci.py --language Java --sample_file 'samples/CustomAuthorizerConnect' --sample_region ${{ env.AWS_DEFAULT_REGION }} --sample_secret_endpoint 'ci/endpoint' --sample_secret_custom_authorizer_name 'ci/CustomAuthorizer/name' --sample_secret_custom_authorizer_password 'ci/CustomAuthorizer/password' --sample_main_class 'customauthorizerconnect.CustomAuthorizerConnect'
      - name: configure AWS credentials (Shadow)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.CI_SHADOW_ROLE }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - name: run Shadow sample
        run: |
          python3 ./utils/run_sample_ci.py --language Java --sample_file 'samples/Shadow' --sample_region ${{ env.AWS_DEFAULT_REGION }} --sample_secret_endpoint 'ci/endpoint' --sample_secret_certificate 'ci/Shadow/cert' --sample_secret_private_key 'ci/Shadow/key' --sample_arguments '--thing_name CI_Shadow_Thing' --sample_main_class 'shadow.ShadowSample'
      - name: configure AWS credentials (Jobs)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.CI_JOBS_ROLE }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - name: run Jobs sample
        run: |
          python3 ./utils/run_sample_ci.py --language Java --sample_file 'samples/Jobs' --sample_region ${{ env.AWS_DEFAULT_REGION }} --sample_secret_endpoint 'ci/endpoint' --sample_secret_certificate 'ci/Jobs/cert' --sample_secret_private_key 'ci/Jobs/key' --sample_arguments '--thing_name CI_Jobs_Thing' --sample_main_class 'jobs.JobsSample'
      - name: configure AWS credentials (Fleet provisioning)
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.CI_FLEET_PROVISIONING_ROLE }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - name: run Fleet Provisioning sample
        run: |
          echo "Generating UUID for IoT thing"
          Sample_UUID=$(python3  -c "import uuid; print (uuid.uuid4())")
          python3 ./utils/run_sample_ci.py --language Java --sample_file 'samples/Identity' --sample_region ${{ env.AWS_DEFAULT_REGION }} --sample_secret_endpoint 'ci/endpoint' --sample_secret_certificate 'ci/FleetProvisioning/cert' --sample_secret_private_key 'ci/FleetProvisioning/key' --sample_arguments "--template_name CI_FleetProvisioning_Template --template_parameters '{SerialNumber:${Sample_UUID}}'" --sample_main_class 'identity.FleetProvisioningSample'
          python3 utils/delete_iot_thing_ci.py --thing_name "Fleet_Thing_${Sample_UUID}" --region "us-east-1"
