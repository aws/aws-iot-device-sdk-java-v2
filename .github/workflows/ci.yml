name: CI

on:
  push:
    branches-ignore:
      - 'main'
      - 'docs'

env:
  BUILDER_VERSION: v0.9.14
  BUILDER_SOURCE: releases
  BUILDER_HOST: https://d19elf31gohf1l.cloudfront.net
  PACKAGE_NAME: aws-iot-device-sdk-java-v2
  RUN: ${{ github.run_id }}-${{ github.run_number }}
  AWS_DEFAULT_REGION: us-east-1
  DA_TOPIC: test/da
  DA_SHADOW_PROPERTY: datest
  DA_SHADOW_VALUE_SET: ON
  DA_SHADOW_VALUE_DEFAULT: OFF
  CI_IOT_CONTAINERS: ${{ secrets.AWS_CI_IOT_CONTAINERS }}
  CI_PUBSUB_ROLE: ${{ secrets.AWS_CI_PUBSUB_ROLE }}

jobs:
  linux-compat:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image:
          - manylinux2014-x64
          - al2-x64
          - fedora-34-x64
          - rhel8-x64
          #- manylinux2014-x86 until we find 32-bit linux binaries we can use
    permissions:
      id-token: write # This is required for requesting the JWT
    steps:
    - name: configure AWS credentials (containers)
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ env.CI_IOT_CONTAINERS }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
    - name: Build ${{ env.PACKAGE_NAME }}
      run: |
        aws s3 cp s3://aws-crt-test-stuff/ci/${{ env.BUILDER_VERSION }}/linux-container-ci.sh ./linux-container-ci.sh && chmod a+x ./linux-container-ci.sh
        ./linux-container-ci.sh ${{ env.BUILDER_VERSION }} aws-crt-${{ matrix.image }} build -p ${{ env.PACKAGE_NAME }}

  windows:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        version:
          - 8
          - 11
          - 17
    permissions:
      id-token: write # This is required for requesting the JWT
    steps:
    - name: Checkout Sources
      uses: actions/checkout@v2
    - name: Setup Java
      uses: actions/setup-java@v2
      with:
        distribution: temurin
        java-version: ${{ matrix.version }}
        cache: maven
    - name: Build ${{ env.PACKAGE_NAME }} + consumers
      run: |
        python -c "from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder.pyz')"
        python builder.pyz build -p ${{ env.PACKAGE_NAME }} --spec=downstream
    - name: configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ env.CI_PUBSUB_ROLE }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
    - name: run PubSub sample
      run: |
        python -m pip install boto3
        python ./utils/run_sample_ci.py --language Java --sample_file 'samples/BasicPubSub' --sample_region ${{ env.AWS_DEFAULT_REGION }} --sample_secret_endpoint 'ci/endpoint' --sample_secret_certificate 'ci/PubSub/cert' --sample_secret_private_key 'ci/PubSub/key' --sample_main_class 'pubsub.PubSub'

  osx:
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        version:
          - 8
          - 11
          - 17
    permissions:
      id-token: write # This is required for requesting the JWT
    steps:
    - name: Checkout Sources
      uses: actions/checkout@v2
    - name: Setup Java
      uses: actions/setup-java@v2
      with:
        distribution: temurin
        java-version: ${{ matrix.version }}
        cache: maven
    - name: Build ${{ env.PACKAGE_NAME }} + consumers
      run: |
        python3 -c "from urllib.request import urlretrieve; urlretrieve('${{ env.BUILDER_HOST }}/${{ env.BUILDER_SOURCE }}/${{ env.BUILDER_VERSION }}/builder.pyz?run=${{ env.RUN }}', 'builder')"
        chmod a+x builder
        ./builder build -p ${{ env.PACKAGE_NAME }} --spec=downstream
    - name: configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ env.CI_PUBSUB_ROLE }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}
    - name: run PubSub sample
      run: |
        python3 -m pip install boto3
        python3 ./utils/run_sample_ci.py --language Java --sample_file 'samples/BasicPubSub' --sample_region ${{ env.AWS_DEFAULT_REGION }} --sample_secret_endpoint 'ci/endpoint' --sample_secret_certificate 'ci/PubSub/cert' --sample_secret_private_key 'ci/PubSub/key' --sample_main_class 'pubsub.PubSub'

  java-compat:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        version:
          - 8
          - 11
          - 17
    permissions:
      id-token: write # This is required for requesting the JWT
    steps:
      - name: Checkout Sources
        uses: actions/checkout@v2
      - name: Setup Java
        uses: actions/setup-java@v2
        with:
          distribution: temurin
          java-version: ${{ matrix.version }}
          cache: maven
      - name: Build ${{ env.PACKAGE_NAME }} + consumers
        run: |
          java -version
          mvn -B test -Daws.crt.debugnative=true
          mvn install -Dmaven.test.skip
      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.CI_PUBSUB_ROLE }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - name: run PubSub sample
        run: |
          python3 -m pip install boto3
          python3 ./utils/run_sample_ci.py --language Java --sample_file 'samples/BasicPubSub' --sample_region ${{ env.AWS_DEFAULT_REGION }} --sample_secret_endpoint 'ci/endpoint' --sample_secret_certificate 'ci/PubSub/cert' --sample_secret_private_key 'ci/PubSub/key' --sample_main_class 'pubsub.PubSub'

  # check that docs can still build
  check-docs:
    runs-on: ubuntu-20.04 # latest
    steps:
      - uses: actions/checkout@v2
      - name: Check docs
        run: |
          mvn install -Dmaven.test.skip
          ./make-docs.py

  # ensure that aws-crt version is consistent among different files
  consistent-crt-version:
    runs-on: ubuntu-20.04 # latest
    steps:
      - uses: actions/checkout@v2
      - name: Consistent aws-crt version
        run: |
          ./update-crt.py --check-consistency

