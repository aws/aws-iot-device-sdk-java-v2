[
  {
    "line": 1,
    "elements": [
      {
        "line": 3,
        "name": "",
        "description": "",
        "type": "background",
        "keyword": "Background",
        "steps": [
          {
            "result": {
              "error_message": "software.amazon.awssdk.core.exception.SdkClientException: Unable to load credentials from any of the providers in the chain AwsCredentialsProviderChain(credentialsProviders\u003d[SystemPropertyCredentialsProvider(), EnvironmentVariableCredentialsProvider(), WebIdentityTokenCredentialsProvider(), ProfileCredentialsProvider(profileName\u003ddefault, profileFile\u003dProfileFile(profilesAndSectionsMap\u003d[{default\u003dProfile(name\u003ddefault, properties\u003d[region])}, {}])), ContainerCredentialsProvider(), InstanceProfileCredentialsProvider()]) : [SystemPropertyCredentialsProvider(): Unable to load credentials from system settings. Access key must be specified either via environment variable (AWS_ACCESS_KEY_ID) or system property (aws.accessKeyId)., EnvironmentVariableCredentialsProvider(): Unable to load credentials from system settings. Access key must be specified either via environment variable (AWS_ACCESS_KEY_ID) or system property (aws.accessKeyId)., WebIdentityTokenCredentialsProvider(): Either the environment variable AWS_WEB_IDENTITY_TOKEN_FILE or the javaproperty aws.webIdentityTokenFile must be set., ProfileCredentialsProvider(profileName\u003ddefault, profileFile\u003dProfileFile(profilesAndSectionsMap\u003d[{default\u003dProfile(name\u003ddefault, properties\u003d[region])}, {}])): Profile file contained no credentials for profile \u0027default\u0027: ProfileFile(profilesAndSectionsMap\u003d[{default\u003dProfile(name\u003ddefault, properties\u003d[region])}, {}]), ContainerCredentialsProvider(): Cannot fetch credentials from container - neither AWS_CONTAINER_CREDENTIALS_FULL_URI or AWS_CONTAINER_CREDENTIALS_RELATIVE_URI environment variables are set., InstanceProfileCredentialsProvider(): Failed to load credentials from IMDS.]\n\tat software.amazon.awssdk.core.exception.SdkClientException$BuilderImpl.build(SdkClientException.java:111)\n\tat software.amazon.awssdk.auth.credentials.AwsCredentialsProviderChain.resolveCredentials(AwsCredentialsProviderChain.java:130)\n\tat software.amazon.awssdk.auth.credentials.internal.LazyAwsCredentialsProvider.resolveCredentials(LazyAwsCredentialsProvider.java:45)\n\tat software.amazon.awssdk.auth.credentials.DefaultCredentialsProvider.resolveCredentials(DefaultCredentialsProvider.java:128)\n\tat software.amazon.awssdk.auth.credentials.AwsCredentialsProvider.resolveIdentity(AwsCredentialsProvider.java:54)\n\tat software.amazon.awssdk.identity.spi.IdentityProvider.resolveIdentity(IdentityProvider.java:60)\n\tat software.amazon.awssdk.awscore.internal.authcontext.AwsCredentialsAuthorizationStrategy.lambda$resolveCredentials$2(AwsCredentialsAuthorizationStrategy.java:112)\n\tat software.amazon.awssdk.core.internal.util.MetricUtils.measureDuration(MetricUtils.java:56)\n\tat software.amazon.awssdk.awscore.internal.authcontext.AwsCredentialsAuthorizationStrategy.resolveCredentials(AwsCredentialsAuthorizationStrategy.java:112)\n\tat software.amazon.awssdk.awscore.internal.authcontext.AwsCredentialsAuthorizationStrategy.addCredentialsToExecutionAttributes(AwsCredentialsAuthorizationStrategy.java:85)\n\tat software.amazon.awssdk.awscore.internal.AwsExecutionContextBuilder.invokeInterceptorsAndCreateExecutionContext(AwsExecutionContextBuilder.java:136)\n\tat software.amazon.awssdk.awscore.client.handler.AwsSyncClientHandler.invokeInterceptorsAndCreateExecutionContext(AwsSyncClientHandler.java:67)\n\tat software.amazon.awssdk.core.internal.handler.BaseSyncClientHandler.lambda$execute$1(BaseSyncClientHandler.java:76)\n\tat software.amazon.awssdk.core.internal.handler.BaseSyncClientHandler.measureApiCallSuccess(BaseSyncClientHandler.java:182)\n\tat software.amazon.awssdk.core.internal.handler.BaseSyncClientHandler.execute(BaseSyncClientHandler.java:74)\n\tat software.amazon.awssdk.core.client.handler.SdkSyncClientHandler.execute(SdkSyncClientHandler.java:45)\n\tat software.amazon.awssdk.awscore.client.handler.AwsSyncClientHandler.execute(AwsSyncClientHandler.java:53)\n\tat software.amazon.awssdk.services.iot.DefaultIotClient.createPolicy(DefaultIotClient.java:3036)\n\tat com.aws.greengrass.testing.resources.iot.IotPolicySpecModel.create(IotPolicySpecModel.java:33)\n\tat com.aws.greengrass.testing.resources.iot.IotPolicySpecModel.create(IotPolicySpecModel.java:19)\n\tat com.aws.greengrass.testing.resources.AbstractAWSResourceLifecycle.create(AbstractAWSResourceLifecycle.java:55)\n\tat com.aws.greengrass.testing.modules.AWSResourcesCleanupModule$CleanupInterceptor.invoke(AWSResourcesCleanupModule.java:89)\n\tat com.aws.greengrass.testing.resources.AWSResources.lambda$create$3(AWSResources.java:109)\n\tat java.base/java.util.Optional.map(Optional.java:260)\n\tat com.aws.greengrass.testing.resources.AWSResources.create(AWSResources.java:109)\n\tat com.aws.greengrass.testing.features.IotSteps.createPolicy(IotSteps.java:84)\n\tat com.aws.greengrass.testing.features.IotSteps.createDefaultPolicy(IotSteps.java:55)\n\tat com.aws.greengrass.testing.features.IotSteps.createDefaultPolicy(IotSteps.java:43)\n\tat java.base/java.util.Optional.orElseGet(Optional.java:364)\n\tat com.aws.greengrass.testing.features.RegistrationSteps.getThingSpec(RegistrationSteps.java:245)\n\tat com.aws.greengrass.testing.features.RegistrationSteps.registerAsThing(RegistrationSteps.java:160)\n\tat âœ½.my device is registered as a Thing(classpath:greengrass/features/component.feature:4)\n",
              "duration": 2668601000,
              "status": "failed"
            },
            "line": 4,
            "name": "my device is registered as a Thing",
            "match": {
              "location": "com.aws.greengrass.testing.features.RegistrationSteps.registerAsThing()"
            },
            "keyword": "Given "
          },
          {
            "result": {
              "duration": 64000,
              "status": "skipped"
            },
            "line": 5,
            "name": "my device is running Greengrass",
            "match": {
              "location": "com.aws.greengrass.testing.features.GreengrassSteps.start()"
            },
            "keyword": "And "
          }
        ]
      },
      {
        "start_timestamp": "2024-05-09T18:12:38.974Z",
        "before": [
          {
            "result": {
              "duration": 466391000,
              "status": "passed"
            },
            "match": {
              "location": "com.aws.greengrass.testing.features.LoggerSteps.addContext(io.cucumber.java.Scenario)"
            }
          }
        ],
        "line": 8,
        "name": "As a developer, I can create a component and deploy it on my device",
        "description": "",
        "id": "testing-features-of-greengrassv2-com.example.pythonhelloworld;as-a-developer--i-can-create-a-component-and-deploy-it-on-my-device",
        "after": [
          {
            "result": {
              "duration": 2839000,
              "status": "passed"
            },
            "match": {
              "location": "com.aws.greengrass.testing.features.NetworkUtilsSteps.restoreDefaultSettings()"
            }
          },
          {
            "result": {
              "duration": 8795000,
              "status": "passed"
            },
            "match": {
              "location": "com.aws.greengrass.testing.features.DeploymentSteps.cleanupDeployments()"
            }
          },
          {
            "result": {
              "duration": 2765000,
              "status": "passed"
            },
            "match": {
              "location": "com.aws.greengrass.testing.features.mqtt.MQTTSteps.disconnect()"
            }
          },
          {
            "result": {
              "duration": 2282000,
              "status": "passed"
            },
            "match": {
              "location": "com.aws.greengrass.testing.features.GreengrassSteps.close()"
            }
          },
          {
            "result": {
              "duration": 529000,
              "status": "passed"
            },
            "match": {
              "location": "com.aws.greengrass.testing.features.FileSteps.copyLogs(io.cucumber.java.Scenario)"
            }
          },
          {
            "result": {
              "duration": 2024965000,
              "status": "passed"
            },
            "match": {
              "location": "com.aws.greengrass.testing.features.AWSResourcesSteps.close()"
            }
          },
          {
            "result": {
              "duration": 937000,
              "status": "passed"
            },
            "match": {
              "location": "com.aws.greengrass.testing.features.DockerSteps.removeCreatedImages()"
            }
          },
          {
            "result": {
              "duration": 212000,
              "status": "passed"
            },
            "match": {
              "location": "com.aws.greengrass.testing.features.LoggerSteps.clearContext(io.cucumber.java.Scenario)"
            }
          }
        ],
        "type": "scenario",
        "keyword": "Scenario",
        "steps": [
          {
            "result": {
              "duration": 64000,
              "status": "skipped"
            },
            "line": 9,
            "name": "I create a Greengrass deployment with components",
            "match": {
              "location": "com.aws.greengrass.testing.features.DeploymentSteps.createDeployment(java.util.List\u003cjava.util.List\u003cjava.lang.String\u003e\u003e)"
            },
            "rows": [
              {
                "cells": [
                  "com.example.PythonHelloWorld",
                  "/Users/igorabd/projects/aws-iot-device-sdk-java-v2/tests/greengrass/HelloWorld/recipe.yaml"
                ]
              }
            ],
            "keyword": "When "
          },
          {
            "result": {
              "duration": 17000,
              "status": "skipped"
            },
            "line": 11,
            "name": "I deploy the Greengrass deployment configuration",
            "match": {
              "location": "com.aws.greengrass.testing.features.DeploymentSteps.startDeployment()"
            },
            "keyword": "And "
          },
          {
            "result": {
              "duration": 14000,
              "status": "skipped"
            },
            "line": 12,
            "name": "the Greengrass deployment is COMPLETED on the device after 180 seconds",
            "match": {
              "arguments": [
                {
                  "val": "COMPLETED",
                  "offset": 29
                },
                {
                  "val": "180",
                  "offset": 59
                },
                {
                  "val": "seconds",
                  "offset": 63
                }
              ],
              "location": "com.aws.greengrass.testing.features.DeploymentSteps.deploymentSucceeds(java.lang.String,int,java.lang.String)"
            },
            "keyword": "Then "
          },
          {
            "result": {
              "duration": 12000,
              "status": "skipped"
            },
            "line": 13,
            "name": "I call my custom step",
            "match": {
              "location": "com.aws.greengrass.CustomSteps.customStep()"
            },
            "keyword": "And "
          }
        ],
        "tags": [
          {
            "name": "@Sample"
          },
          {
            "name": "@com.example.PythonHelloWorld"
          }
        ]
      }
    ],
    "name": "Testing features of Greengrassv2 com.example.PythonHelloWorld",
    "description": "",
    "id": "testing-features-of-greengrassv2-com.example.pythonhelloworld",
    "keyword": "Feature",
    "uri": "classpath:greengrass/features/component.feature",
    "tags": []
  }
]